---
description: Cursor development rules
globs: 
---
# Generator Development Rules

## Iterative Development Workflow

### 1. Test Type Evolution

Start with `BasicTestTypes.java` and gradually increase complexity:

```java
// Step 1: Basic fields
public class BasicTestTypes {
    private String foo;
}

// Step 2: Add primitive types
public class BasicTestTypes {
    private String foo;
    private int count;
    private boolean active;
}

// Step 3: Add collections
public class BasicTestTypes {
    private String foo;
    private int count;
    private boolean active;
    private List<String> tags;
}

// And so on...
```

### 2. Development Cycle

#### Step 1: Enhance Test Type

- Add new fields/structures to `BasicTestTypes.java`
- One concept at a time (e.g., add a List, then run full cycle)
- Keep previous fields to ensure no regression

#### Step 2: Generate Initial Parser

```bash
mvn test
```

- This generates parser in `src/test/resources/parsers/generated/`
- Test will fail due to mismatch with expected

#### Step 3: Compare & Update

- Compare generated parser with expected
- Update expected parser in `src/test/resources/parsers/expected/`
- Focus on proper JSON parsing for new fields

#### Step 4: Iterative Development

- Modify generator code to match expected output
- Run tests frequently
- Repeat until generated matches expected

#### Step 5: Verify & Document

- Ensure all tests pass
- Document new type support
- Commit changes (test type, expected parser, generator changes)

### 3. File Organization

#### Working Set

```
LEFT PANEL:
src/test/java/nl/overheid/aerius/codegen/test/types/BasicTestTypes.java
src/test/resources/parsers/expected/BasicTestTypesParser.java

RIGHT PANEL:
src/test/resources/parsers/generated/BasicTestTypesParser.java
[Generator component being modified]
```

### 4. Type Progression Order

1. **Basic Types**

   - String, Integer, Boolean
   - Primitive types
   - Enums
   - Date/time

2. **Collections**

   - List<Simple>
   - Set<Simple>
   - List<Complex>

3. **Maps**

   - Map<String, Simple>
   - Map<String, Complex>
   - Map<String, List<Complex>>

4. **Nested Structures**

   - Simple nested objects
   - Collections of nested objects
   - Maps of nested objects

5. **Complex Combinations**
   - Maps within maps
   - Lists within maps
   - Mixed nesting levels

### 5. Error Resolution

#### Test Failures

1. Compare generated vs expected:
   ```bash
   diff src/test/resources/parsers/expected/BasicTestTypesParser.java \
        src/test/resources/parsers/generated/BasicTestTypesParser.java
   ```
2. Check test output
3. Modify generator code
4. Rerun tests

#### Common Issues

- Type discovery failures
- Template mismatches
- Parsing logic gaps
- Formatting differences

### 6. Code Style

#### Generated Parser Style

- Consistent null checking
- Clear field parsing structure
- 2-space indentation
- No unnecessary comments

#### Test Type Style

- Clear field organization
- Logical grouping of related fields
- Standard Java naming conventions

### 7. Version Control

#### Commit Structure

1. Test type enhancement
2. Expected parser update
3. Generator code changes

#### When to Commit

- After each successful type addition
- When generated parser matches expected
- When all tests pass
